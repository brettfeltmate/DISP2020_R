) %>%
kable(digits = 4)
dat %>%
filter(
prime_correct &
far_near == 'near' &
prime_proximity == 'adjacent'
) -> extension
ezANOVA(
data = extension,
dv = probe_acc,
wid = participant,
within = CoG_proximity
) -> CoG_Acc.AOV
kable(CoG_Acc.AOV$ANOVA, digits = 4)
ezStats(
data = extension,
dv = probe_acc,
wid = participant,
within = CoG_proximity
) -> CoG_Acc.stats
CoG_Acc.stats[,3:5] <- CoG_Acc.stats[,3:5] * 100
kable(CoG_Acc.stats, digits = 4)
dat %>%
filter(
prime_correct &
probe_correct &
far_near == 'near' &
prime_proximity == 'non-adjacent'
) -> extension
extension$t_probe_d_prime_dist <- factor(
ifelse(
extension$t_probe_to_d_prime == 84, 'flanking', 'opposite'
),
levels = c('flanking', 'opposite')
)
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
as.is = TRUE,
warning = FALSE)
if (!require(pacman)) {install.packages('pacman')}
pacman::p_load(
tidyverse,
afex,
emmeans,
ez,
skimr,
knitr
)
setwd("~/Stats/NP-IOR")
list.files(
path="Data",
pattern="*.txt",
full.names=TRUE
) %>%
map_df(
~read.csv(
.,
header=TRUE,
sep='\t',
skip=16
)) -> dat
filter(dat, !practicing) -> dat
directions <- tibble(
t_prime_loc = c('North', 'East', 'South', "West",
"NorthEast", "NorthWest", "SouthWest", "SouthEast"),
array_shape = c(rep("diamond", 4), rep("square", 4))
)
dat <- left_join(dat, directions, by = 't_prime_loc')
# I hand coded lookup tables with the appropriate labels
prime_proximity <- read.csv('prime_proximity.csv')
probe_proximity <- read.csv('probe_proximity.csv')
# Merge tables to dataframe
dat <- left_join(dat, prime_proximity, by = c('t_prime_loc', 'd_prime_loc'))
dat <- left_join(dat, probe_proximity, by = c('t_probe_loc', 'd_probe_loc'))
# Similarly, for labelling Centre of Gravity in Prime array
CoG_lookup <- read.csv("prime_CoG_lookup.csv")
dat <- left_join(dat, CoG_lookup, by = c('t_prime_loc', 'd_prime_loc'))
# These variables should only take one of five values, but seem to vary by a few decimals
# this shifts them back into position.
dat$t_prime_to_d_probe <- ceiling(dat$t_prime_to_d_probe)
dat$d_prime_to_d_probe <- ceiling(dat$d_prime_to_d_probe)
dat$t_prime_to_t_probe <- ceiling(dat$t_prime_to_t_probe)
dat$d_prime_to_t_probe <- ceiling(dat$d_prime_to_t_probe)
dat$t_prime_to_d_probe <- ifelse(dat$t_prime_to_d_probe == 83, 84, dat$t_prime_to_d_probe)
dat$t_prime_to_d_probe <- ifelse(dat$t_prime_to_d_probe == 236, 237, dat$t_prime_to_d_probe)
dat$d_prime_to_d_probe <- ifelse(dat$d_prime_to_d_probe == 83, 84, dat$d_prime_to_d_probe)
dat$d_prime_to_d_probe <- ifelse(dat$d_prime_to_d_probe == 236, 237, dat$d_prime_to_d_probe)
dat$t_prime_to_t_probe <- ifelse(dat$t_prime_to_t_probe == 83, 84, dat$t_prime_to_t_probe)
dat$t_prime_to_t_probe <- ifelse(dat$t_prime_to_t_probe == 236, 237, dat$t_prime_to_t_probe)
dat$d_prime_to_t_probe <- ifelse(dat$d_prime_to_t_probe == 83, 84, dat$d_prime_to_t_probe)
dat$d_prime_to_t_probe <- ifelse(dat$d_prime_to_t_probe == 236, 237, dat$d_prime_to_t_probe)
# Reorder Trial Types to align w/ Christie & Klein
trial_types <- c('repeat', 'T.to.T-far', 'D.to.D-far', 'D.to.T-far',
'T.to.D-far', 'switch', 'control-far', 'T.at.CoG-near',
'D.at.CoG-near', 'control-near')
dat$trial_type <- factor(dat$trial_type, levels = trial_types)
# AND I coded distance from prime Ts & Ds, but not from their CoG, Whoops
CoG_distance <- read.csv('CoG_Distance_Table.csv')
dat <- left_join(dat, CoG_distance, by = c('prime_CoG', 't_probe_loc'))
dat$CoG_proximity <- factor(dat$CoG_proximity, levels = c('At_CoG', 'Adjacent_CoG', 'Opposite_CoG'))
# Convert accuracy from logical to numeric
dat$probe_acc <- as.numeric(ifelse(dat$probe_correct, 1, 0))
dat %>%
filter(
prime_rt >= 100 &
probe_rt >= 100) -> dat
MeanRT.Prime <- mean(dat$prime_rt[dat$prime_correct])
MeanAcc.Prime <- mean(dat$prime_correct)
kable(
tibble(
'Mean_RT' = MeanRT.Prime,
'Mean_Acc' = MeanAcc.Prime
), digits = 4
)
dat %>%
filter(
prime_correct &
far_near == 'far'
) -> probe
ezANOVA(
data = filter(probe, probe_correct),
dv = probe_rt,
wid = participant,
within = trial_type
) -> probe_RT.AOV
kable(probe_RT.AOV$ANOVA, digits = 4)
ezStats(
data = filter(probe, probe_correct),
dv = probe_rt,
wid = participant,
within = trial_type
) %>%
kable(digits = 4)
ezANOVA(
data = probe,
dv = probe_acc,
wid = participant,
within = trial_type
) -> probe_acc.AOV
kable(probe_acc.AOV$ANOVA, digits = 4)
ezStats(
data = probe,
dv = probe_acc,
wid = participant,
within = trial_type
) -> probe_accs
probe_accs[,3:5] <- probe_accs[,3:5] * 100
kable(probe_accs, digits = 4)
dat %>%
filter(
prime_correct &
far_near == 'near' &
prime_proximity == 'adjacent'
) -> extension
CoG_RT.AOV <- ezANOVA(
data = filter(extension, probe_correct),
dv = probe_rt,
wid = participant,
within = CoG_proximity
)
kable(CoG_RT.AOV$ANOVA, digits = 4)
ezStats(
data = filter(extension, probe_correct),
dv = probe_rt,
wid = participant,
within = CoG_proximity
) %>%
kable(digits = 4)
dat %>%
filter(
prime_correct &
far_near == 'near' &
prime_proximity == 'adjacent'
) -> extension
ezANOVA(
data = extension,
dv = probe_acc,
wid = participant,
within = CoG_proximity
) -> CoG_Acc.AOV
kable(CoG_Acc.AOV$ANOVA, digits = 4)
ezStats(
data = extension,
dv = probe_acc,
wid = participant,
within = CoG_proximity
) -> CoG_Acc.stats
CoG_Acc.stats[,3:5] <- CoG_Acc.stats[,3:5] * 100
kable(CoG_Acc.stats, digits = 4)
dat %>%
filter(
prime_correct &
probe_correct &
far_near == 'near' &
prime_proximity == 'non-adjacent'
) -> extension
extension$d_prime_t_probe_dist <- factor(
ifelse(
extension$d_prime_to_t_probe == 84, 'flanking', 'opposite'
),
levels = c('flanking', 'opposite')
)
ezANOVA(
data = filter(extension, probe_correct),
dv = probe_rt,
wid = participant,
within = d_prime_t_probe_dist
) -> primeD_RT.AOV
kable(primeD_RT.AOV$ANOVA, digits = 4)
ezStats(
data = filter(extension, probe_correct),
dv = probe_rt,
wid = participant,
within = d_prime_t_probe_dist
) %>% kable(digits = 4)
dat %>%
filter(
prime_correct &
far_near == 'near' &
prime_proximity == 'non-adjacent'
) -> extension
extension$d_prime_t_probe_dist <- factor(
ifelse(
extension$d_prime_to_t_probe == 84, 'flanking', 'opposite'
),
levels = c('flanking', 'opposite')
)
ezANOVA(
data = extension,
dv = probe_acc,
wid = participant,
within = d_prime_t_probe_dist
) -> primeD_Acc.AOV
kable(primeD_Acc.AOV$ANOVA, digits = 4)
ezStats(
data = extension,
dv = probe_acc,
wid = participant,
within = d_prime_t_probe_dist
) -> primeD_Acc.Stats
primeD_Acc.Stats[,3:5] <- primeD_Acc.Stats[,3:5] * 100
kable(primeD_Acc.Stats, digits = 4)
shiny::runApp('SelfLearn/R/ShinyApps/App-2')
runApp('SelfLearn/R/ShinyApps/App-2')
runApp('SelfLearn/R/ShinyApps/App-2')
runApp('SelfLearn/R/ShinyApps/App-2')
runApp('SelfLearn/R/ShinyApps/App-2')
runApp('SelfLearn/R/ShinyApps/App-2')
runApp('SelfLearn/R/ShinyApps/App-2')
getwd()
shiny::runApp('SelfLearn/R/ShinyApps/app-3/app')
shiny::runApp('Desktop/dd-creator')
install.packages('shinydashboard')
install.packages('DT')
install.packages('jsonlite')
install.packages('haven')
install.packages('rio')
runApp('Desktop/dd-creator')
input <- c(1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,5,23,2,10,23,27,2,27,13,31,1,10,31,35,1,35,9,39,2,39,13,43,1,43,5,47,1,47,6,51,2,6,51,55,1,5,55,59,2,9,59,63,2,6,63,67,1,13,67,71,1,9,71,75,2,13,75,79,1,79,10,83,2,83,9,87,1,5,87,91,2,91,6,95,2,13,95,99,1,99,5,103,1,103,2,107,1,107,10,0,99,2,0,14,0)
i<- 1
while(TRUE) {
ith_val <- input[i]
if (i > length(input) | ith_val == 99) {break}
j <- input[i+1]+1
k <- input[i+2]+1
l <- input[i+3]+1
if (iv == 1) { input[l] <- input[j] + input[k] }
if (iv == 2) { input[l] <- input[j] * input[k] }
i <- i + 4
}
input[1]
input <- c(1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,5,23,2,10,23,27,2,27,13,31,1,10,31,35,1,35,9,39,2,39,13,43,1,43,5,47,1,47,6,51,2,6,51,55,1,5,55,59,2,9,59,63,2,6,63,67,1,13,67,71,1,9,71,75,2,13,75,79,1,79,10,83,2,83,9,87,1,5,87,91,2,91,6,95,2,13,95,99,1,99,5,103,1,103,2,107,1,107,10,0,99,2,0,14,0)
i<- 1
while(TRUE) {
ith_val <- input[i]
if (i > length(input) | ith_val == 99) {break}
j <- input[i+1]+1
k <- input[i+2]+1
l <- input[i+3]+1
if (ith_val == 1) { input[l] <- input[j] + input[k] }
if (ith_val == 2) { input[l] <- input[j] * input[k] }
i <- i + 4
}
input[1]
input <- c(1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,5,23,2,10,23,27,2,27,13,31,1,10,31,35,1,35,9,39,2,39,13,43,1,43,5,47,1,47,6,51,2,6,51,55,1,5,55,59,2,9,59,63,2,6,63,67,1,13,67,71,1,9,71,75,2,13,75,79,1,79,10,83,2,83,9,87,1,5,87,91,2,91,6,95,2,13,95,99,1,99,5,103,1,103,2,107,1,107,10,0,99,2,0,14,0)
i<- 1
while(TRUE) {
ith_val <- input[i]
if (i > length(input)) {break}
if (ith_val == 99) {break}
j <- input[i+1]+1
k <- input[i+2]+1
l <- input[i+3]+1
if (ith_val == 1) { input[l] <- input[j] + input[k] }
if (ith_val == 2) { input[l] <- input[j] * input[k] }
i <- i + 4
}
input[1]
input <- c(1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,5,23,2,10,23,27,2,27,13,31,1,10,31,35,1,35,9,39,2,39,13,43,1,43,5,47,1,47,6,51,2,6,51,55,1,5,55,59,2,9,59,63,2,6,63,67,1,13,67,71,1,9,71,75,2,13,75,79,1,79,10,83,2,83,9,87,1,5,87,91,2,91,6,95,2,13,95,99,1,99,5,103,1,103,2,107,1,107,10,0,99,2,0,14,0)
i<- 1
while(TRUE) {
ith_val <- input[i]
if (i > length(input)) {break}
if (ith_val == 99) {break}
j <- input[i+1]+1
k <- input[i+2]+1
l <- input[i+3]+1
if (ith_val == 1) { input[l] <- input[j] + input[k] }
if (ith_val == 2) { input[l] <- input[j] * input[k] }
i <- i + 4
}
input[1]
input <- c(1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,5,23,2,10,23,27,2,27,13,31,1,10,31,35,1,35,9,39,2,39,13,43,1,43,5,47,1,47,6,51,2,6,51,55,1,5,55,59,2,9,59,63,2,6,63,67,1,13,67,71,1,9,71,75,2,13,75,79,1,79,10,83,2,83,9,87,1,5,87,91,2,91,6,95,2,13,95,99,1,99,5,103,1,103,2,107,1,107,10,0,99,2,0,14,0)
i<- 1
while(TRUE) {
ith_val <- input[i]
if (i > length(input) | ith_val == 99) {break}
#if (ith_val == 99) {break}
j <- input[i+1]+1
k <- input[i+2]+1
l <- input[i+3]+1
if (ith_val == 1) { input[l] <- input[j] + input[k] }
if (ith_val == 2) { input[l] <- input[j] * input[k] }
i <- i + 4
}
input[1]
input <- c(1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,5,23,2,10,23,27,2,27,13,31,1,10,31,35,1,35,9,39,2,39,13,43,1,43,5,47,1,47,6,51,2,6,51,55,1,5,55,59,2,9,59,63,2,6,63,67,1,13,67,71,1,9,71,75,2,13,75,79,1,79,10,83,2,83,9,87,1,5,87,91,2,91,6,95,2,13,95,99,1,99,5,103,1,103,2,107,1,107,10,0,99,2,0,14,0)
i<- 1
len <- length(input)
for ( i in seq(1, len, 4))
ith_val <- input[i]
if (i > length(input) | ith_val == 99) {break}
#if (ith_val == 99) {break}
j <- input[i+1]+1
k <- input[i+2]+1
l <- input[i+3]+1
if (ith_val == 1) { input[l] <- input[j] + input[k] }
if (ith_val == 2) { input[l] <- input[j] * input[k] }
}
input[1]
input <- c(1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,5,23,2,10,23,27,2,27,13,31,1,10,31,35,1,35,9,39,2,39,13,43,1,43,5,47,1,47,6,51,2,6,51,55,1,5,55,59,2,9,59,63,2,6,63,67,1,13,67,71,1,9,71,75,2,13,75,79,1,79,10,83,2,83,9,87,1,5,87,91,2,91,6,95,2,13,95,99,1,99,5,103,1,103,2,107,1,107,10,0,99,2,0,14,0)
i<- 1
len <- length(input)
for ( i in seq(1, len, 4)) {
ith_val <- input[i]
if (i > length(input) | ith_val == 99) {break}
#if (ith_val == 99) {break}
j <- input[i+1]+1
k <- input[i+2]+1
l <- input[i+3]+1
if (ith_val == 1) { input[l] <- input[j] + input[k] }
if (ith_val == 2) { input[l] <- input[j] * input[k] }
}
input[1]
input <- c(1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,5,23,2,10,23,27,2,27,13,31,1,10,31,35,1,35,9,39,2,39,13,43,1,43,5,47,1,47,6,51,2,6,51,55,1,5,55,59,2,9,59,63,2,6,63,67,1,13,67,71,1,9,71,75,2,13,75,79,1,79,10,83,2,83,9,87,1,5,87,91,2,91,6,95,2,13,95,99,1,99,5,103,1,103,2,107,1,107,10,0,99,2,0,14,0)
len <- length(input)
for ( i in seq(1, len, 4)) {
ith_val <- input[i]
if (i > length(input) | ith_val == 99) {break}
#if (ith_val == 99) {break}
j <- input[i+1]+1
k <- input[i+2]+1
l <- input[i+3]+1
if (ith_val == 1) { input[l] <- input[j] + input[k] }
if (ith_val == 2) { input[l] <- input[j] * input[k] }
}
input[1]
memory <- c(1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,5,23,2,10,23,27,2,27,13,31,1,10,31,35,1,35,9,39,2,39,13,43,1,43,5,47,1,47,6,51,2,6,51,55,1,5,55,59,2,9,59,63,2,6,63,67,1,13,67,71,1,9,71,75,2,13,75,79,1,79,10,83,2,83,9,87,1,5,87,91,2,91,6,95,2,13,95,99,1,99,5,103,1,103,2,107,1,107,10,0,99,2,0,14,0)
len <- length(memory)
for (address in seq(1, len, 4)) {
instruction_pointer <- address
instruction <- memory[instruction_pointer]
if (instruction == 99) {break}
noun <- memory[address+1]+1
verb <- memory[address+2]+1
output_pointer <- memory[address+3]+1
if (instruction == 1) {
memory[output_pointer] <- memory[noun] + memory[verb]
}
if (instruction == 2) {
memory[output_pointer] <- memory[noun] * memory[verb]
}
}
memory[1]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
setwd('/Users/Brett/Dalhousie/Klein/DISP/2020/Analysis/')
library(tidyverse)
dat <- list.files(path="Data", pattern="*.txt", full.names=TRUE) %>%
map_df(~read.csv(., header=TRUE, sep='\t', skip=16))
dat$participant <- str_sub(dat$participant, 0, 6)
str(dat)
summary(dat)
dat <- filter(dat, !practicing)
groupings = c('participant', 'search_type', 'stimulus_type')
for (g in groupings) {
dat %>%
group_by((!!as.symbol(g))) %>%
summarize(
prop.absent = mean(response=='absent'),
prop.present = mean(response=='present'),
prop.none = mean(response=='none')
) %>%
print()
}
dat$response <- factor(dat$response, levels=c('absent', 'present'))
dat$set_size <- factor(dat$set_size, levels = c(8,12,16))
colour.space <- filter(dat, stimulus_type == 'COLOUR' & search_type == 'space')
colour.time <- filter(dat, stimulus_type == 'COLOUR' & search_type == 'time')
line.space <- filter(dat, stimulus_type == 'LINE' & search_type == 'space')
line.time <- filter(dat, stimulus_type == 'LINE' & search_type == 'time')
save(colour.space, file="colour_space.RData")
save(colour.time, file="colour_time.RData")
save(line.space, file="line_space.RData")
save(line.time, file="line_time.RData")
library(ez)
setwd('/Users/Brett/Dalhousie/Klein/DISP/2020/Analysis/')
load('colour_space.RData')
dat <- colour.space
# Check RT distribution
hist(dat$rt, freq=FALSE, br=30)
hist(log(dat$rt), freq=FALSE, br=30)
# Bin RTs
dat$rt_bin <- fct_explicit_na(cut_width(dat$rt, 50), "NA")
# Binwise summary stats
# Determine upper/lower bin w/ sufficient n(rts) for analysis
dat %>%
group_by(rt_bin) %>%
summarize(
nResponses = n(),
mean.RT = mean(rt),
mean.Err = mean(error)
) %>% View()
# Appropriate cutoff?
hist(dat$rt, freq=FALSE, br=50)
abline(v=c(300, 2250))
# Apply trim
dat <- filter(dat, between(rt,300, 2250))
#
# General performance
# ===============================
dat %>%
group_by(
participant, set_size,
target_distractor, distractor_distractor,
present_absent
) %>%
summarise(
meanRT = mean(rt),
meanErr = mean(error)
) -> SubjMeans
SubjMeans %>%
group_by(
target_distractor, distractor_distractor,
present_absent
) %>%
summarise(
meanRT = mean(meanRT),
meanErr = mean(meanErr)
)
rts <- filter(dat, error == 0) # (erroneous trials excluded)
ezStats(
dat=rts,
dv=rt, wid=participant,
within = .(present_absent, target_distractor, distractor_distractor),
within_full = .(set_size, present_absent,
target_distractor, distractor_distractor)
)
# Take log of RTs for testing purposes
rts$lrt <- log(rts$rt)
ezANOVA(
dat=rts,
dv=lrt, wid=participant,
within = .(set_size, target_distractor, distractor_distractor),
within_full = .(present_absent, set_size, target_distractor, distractor_distractor)
)
ezPlot(
rts,
dv=rt, wid=participant,
within=.(target_distractor, distractor_distractor, present_absent, set_size),
x=set_size,
split=present_absent,
row=target_distractor,
col=distractor_distractor
)
slopes <- rts %>%
group_by(participant,target_distractor, distractor_distractor, present_absent) %>%
do({
mod = lm(rt ~ as.numeric(set_size), data = .)
data.frame(Intercept = coef(mod)[1], Slope = coef(mod)[2])
})
ezStats(
slopes,
dv=Slope, wid=participant,
within = .(target_distractor, distractor_distractor, present_absent)
)
ezPlot(
slopes,
dv=Slope, wid=participant,
within=.(present_absent, target_distractor, distractor_distractor),
x = present_absent,
row = distractor_distractor,
col = target_distractor
)
?ezStats
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
rstudioapi::addTheme("https://raw.githubusercontent.com/patrickshox/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark.rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/patrickshox/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
getwd()
